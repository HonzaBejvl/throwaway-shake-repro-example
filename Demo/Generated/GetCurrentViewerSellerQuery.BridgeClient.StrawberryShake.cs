// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetCurrentViewerSeller GraphQL operation
    /// <code>
    /// query GetCurrentViewerSeller {
    ///   viewer {
    ///     __typename
    ///     ... ViewerSeller
    ///   }
    /// }
    /// 
    /// fragment ViewerSeller on Viewer {
    ///   sellers {
    ///     __typename
    ///     seller {
    ///       __typename
    ///       ... Seller
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Seller on Seller {
    ///   ... Broker
    ///   ... Individual
    ///   ... Office
    ///   ... Company
    /// }
    /// 
    /// fragment Broker on Broker {
    ///   ... HasBrokerInformation
    ///   company {
    ///     __typename
    ///     ... Company
    ///   }
    /// }
    /// 
    /// fragment HasBrokerInformation on Broker {
    ///   sellerId
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    /// }
    /// 
    /// fragment Photo on Photo {
    ///   figureId
    ///   url
    ///   originalUrl
    ///   is360
    /// }
    /// 
    /// fragment Company on Company {
    ///   ... HasCompanyInformation
    /// }
    /// 
    /// fragment HasCompanyInformation on Company {
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    ///   headquarters {
    ///     __typename
    ///     ... Address
    ///   }
    /// }
    /// 
    /// fragment Address on Address {
    ///   lat
    ///   lng
    ///   cityName
    ///   streetName
    ///   ruianCode
    /// }
    /// 
    /// fragment Individual on Individual {
    ///   sellerId
    /// }
    /// 
    /// fragment Office on Office {
    ///   sellerId
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    ///   company {
    ///     __typename
    ///     ... Company
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetCurrentViewerSellerQuery : global::Logic.Graphql.Generated.IGetCurrentViewerSellerQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCurrentViewerSellerResult> _operationExecutor;
        public GetCurrentViewerSellerQuery(global::StrawberryShake.IOperationExecutor<IGetCurrentViewerSellerResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCurrentViewerSellerResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCurrentViewerSellerResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCurrentViewerSellerResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCurrentViewerSellerQueryDocument.Instance.Hash.Value, name: "GetCurrentViewerSeller", document: GetCurrentViewerSellerQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}
