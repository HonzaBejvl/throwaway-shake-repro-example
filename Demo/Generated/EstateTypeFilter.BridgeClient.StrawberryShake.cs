// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class EstateTypeFilter : global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo
    {
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.EstateType> _value_main;
        private global::System.Boolean _set_main;
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.ApartmentType>? _value_apartmentTypes;
        private global::System.Boolean _set_apartmentTypes;
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.HouseType>? _value_houseTypes;
        private global::System.Boolean _set_houseTypes;
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.LandType>? _value_landTypes;
        private global::System.Boolean _set_landTypes;
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.CommercialType>? _value_commercialTypes;
        private global::System.Boolean _set_commercialTypes;
        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.GarageType>? _value_garageTypes;
        private global::System.Boolean _set_garageTypes;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.EstateType> Main
        {
            get => _value_main;
            set
            {
                _set_main = true;
                _value_main = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsMainSet => _set_main;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.ApartmentType>? ApartmentTypes
        {
            get => _value_apartmentTypes;
            set
            {
                _set_apartmentTypes = true;
                _value_apartmentTypes = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsApartmentTypesSet => _set_apartmentTypes;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.HouseType>? HouseTypes
        {
            get => _value_houseTypes;
            set
            {
                _set_houseTypes = true;
                _value_houseTypes = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsHouseTypesSet => _set_houseTypes;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.LandType>? LandTypes
        {
            get => _value_landTypes;
            set
            {
                _set_landTypes = true;
                _value_landTypes = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsLandTypesSet => _set_landTypes;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.CommercialType>? CommercialTypes
        {
            get => _value_commercialTypes;
            set
            {
                _set_commercialTypes = true;
                _value_commercialTypes = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsCommercialTypesSet => _set_commercialTypes;
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.GarageType>? GarageTypes
        {
            get => _value_garageTypes;
            set
            {
                _set_garageTypes = true;
                _value_garageTypes = value;
            }
        }

        global::System.Boolean global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo.IsGarageTypesSet => _set_garageTypes;
    }
}
