// <auto-generated/>
#nullable enable

namespace Demo.Graphql
{
    /// <summary>
    /// Represents the operation service of the GetAll GraphQL operation
    /// <code>
    /// query GetAll {
    ///   listings {
    ///     __typename
    ///     ... AllListing
    ///   }
    /// }
    /// 
    /// fragment AllListing on Listing {
    ///   ... Offer
    ///   ... Auction
    /// }
    /// 
    /// fragment Offer on Offer {
    ///   serviceType
    /// }
    /// 
    /// fragment Auction on Auction {
    ///   serviceType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetAllQuery : global::Demo.Graphql.IGetAllQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllResult> _operationExecutor;
        public GetAllQuery(global::StrawberryShake.IOperationExecutor<IGetAllResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllQueryDocument.Instance.Hash.Value, name: "GetAll", document: GetAllQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}
