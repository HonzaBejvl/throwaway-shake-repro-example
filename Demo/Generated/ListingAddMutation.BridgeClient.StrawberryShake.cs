// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the ListingAdd GraphQL operation
    /// <code>
    /// mutation ListingAdd($listingInput: ListingInput!, $currency: Currency!) {
    ///   listingAdd(input: $listingInput) {
    ///     __typename
    ///     ... ListingAddPayload
    ///   }
    /// }
    /// 
    /// fragment ListingAddPayload on ListingAddPayload {
    ///   result {
    ///     __typename
    ///     ... ListingDetailAdmin
    ///   }
    /// }
    /// 
    /// fragment ListingDetailAdmin on Listing {
    ///   ... OfferDetailAdmin
    ///   ... AuctionDetailAdmin
    ///   ... ProjectDetailAdmin
    ///   ... HasListingId
    ///   ... HasTitle
    ///   ... HasDescription
    ///   ... HasSlideshow
    ///   ... HasPhotos
    ///   ... HasVideos
    ///   ... HasFloorPlans
    ///   ... HasState
    ///   created
    ///   published
    ///   closed
    /// }
    /// 
    /// fragment OfferDetailAdmin on Offer {
    ///   price {
    ///     __typename
    ///     ... Price
    ///   }
    ///   serviceType
    ///   estate {
    ///     __typename
    ///     ... EstateAdmin
    ///   }
    ///   seller {
    ///     __typename
    ///     ... SellerAdmin
    ///   }
    /// }
    /// 
    /// fragment Price on Price {
    ///   value(currency: $currency)
    ///   originalCurrency
    ///   period
    ///   unit
    /// }
    /// 
    /// fragment EstateAdmin on Estate {
    ///   type
    ///   electricity
    ///   gas
    ///   water
    ///   heating
    ///   waste
    ///   road
    ///   natureProtection
    ///   connectivity
    ///   ... HasEstateTypeInfo
    ///   fullAddress {
    ///     __typename
    ///     ... Address
    ///   }
    /// }
    /// 
    /// fragment HasEstateTypeInfo on Estate {
    ///   typeInfo {
    ///     __typename
    ///     ... ApartmentInfo
    ///     ... LandInfo
    ///     ... GarageInfo
    ///     ... HouseInfo
    ///     ... CommercialInfo
    ///   }
    /// }
    /// 
    /// fragment ApartmentInfo on ApartmentInfo {
    ///   apartmentType: type
    ///   usableArea
    ///   material
    ///   energyEfficiency
    ///   energyCertificate
    ///   condition
    ///   material
    ///   balconyArea
    ///   terraceArea
    ///   loggiaArea
    ///   cellarArea
    ///   ceilingHeight
    ///   poolArea
    ///   acceptanceYear
    ///   constructionYear
    ///   reconstructionYear
    ///   amenities
    ///   roomCount
    ///   floorNumber
    ///   apartmentNumber
    ///   placement
    ///   specialClass
    /// }
    /// 
    /// fragment LandInfo on LandInfo {
    ///   landlType: type
    ///   landArea
    /// }
    /// 
    /// fragment GarageInfo on GarageInfo {
    ///   garageType: type
    ///   usableArea
    /// }
    /// 
    /// fragment HouseInfo on HouseInfo {
    ///   houseType: type
    ///   energyEfficiency
    ///   energyCertificate
    ///   condition
    ///   material
    ///   placement
    ///   roomCount
    ///   ceilingHeight
    ///   amenities
    ///   usableArea
    ///   balconyArea
    ///   terraceArea
    ///   ceilingHeight
    ///   loggiaArea
    ///   reconstructionYear
    ///   constructionYear
    ///   acceptanceYear
    ///   cellarArea
    ///   poolArea
    ///   roomCount
    ///   landArea
    ///   placement
    /// }
    /// 
    /// fragment CommercialInfo on CommercialInfo {
    ///   commercialType: type
    ///   energyEfficiency
    ///   energyCertificate
    ///   condition
    ///   material
    ///   placement
    ///   roomCount
    ///   ceilingHeight
    ///   amenities
    ///   usableArea
    ///   balconyArea
    ///   ceilingHeight
    ///   terraceArea
    ///   loggiaArea
    ///   cellarArea
    ///   poolArea
    ///   constructionYear
    ///   acceptanceYear
    ///   reconstructionYear
    ///   storeArea
    ///   roomCount
    ///   officeArea
    ///   warehouseArea
    ///   productionArea
    ///   placement
    /// }
    /// 
    /// fragment Address on Address {
    ///   lat
    ///   lng
    ///   cityName
    ///   streetName
    ///   ruianCode
    /// }
    /// 
    /// fragment SellerAdmin on Seller {
    ///   ... BrokerAdmin
    ///   ... Individual
    ///   ... OfficeAdmin
    ///   ... CompanyAdmin
    /// }
    /// 
    /// fragment BrokerAdmin on Broker {
    ///   ... HasBrokerInformation
    ///   company {
    ///     __typename
    ///     ... CompanyAdmin
    ///   }
    ///   subordinates {
    ///     __typename
    ///     ... Subordinate
    ///   }
    /// }
    /// 
    /// fragment HasBrokerInformation on Broker {
    ///   sellerId
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    /// }
    /// 
    /// fragment Photo on Photo {
    ///   figureId
    ///   url
    ///   originalUrl
    ///   is360
    /// }
    /// 
    /// fragment CompanyAdmin on Company {
    ///   ... HasCompanyInformation
    ///   subordinates {
    ///     __typename
    ///     ... Subordinate
    ///   }
    /// }
    /// 
    /// fragment HasCompanyInformation on Company {
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    ///   headquarters {
    ///     __typename
    ///     ... Address
    ///   }
    /// }
    /// 
    /// fragment Subordinate on SellerStructural {
    ///   sellerId
    /// }
    /// 
    /// fragment Individual on Individual {
    ///   sellerId
    /// }
    /// 
    /// fragment OfficeAdmin on Office {
    ///   sellerId
    ///   name
    ///   photo {
    ///     __typename
    ///     ... Photo
    ///   }
    ///   company {
    ///     __typename
    ///     ... CompanyAdmin
    ///   }
    ///   subordinates {
    ///     __typename
    ///     ... Subordinate
    ///   }
    /// }
    /// 
    /// fragment AuctionDetailAdmin on Auction {
    ///   startingPrice {
    ///     __typename
    ///     ... Price
    ///   }
    ///   serviceType
    ///   estate {
    ///     __typename
    ///     ... EstateAdmin
    ///   }
    ///   seller {
    ///     __typename
    ///     ... SellerAdmin
    ///   }
    /// }
    /// 
    /// fragment ProjectDetailAdmin on Project {
    ///   seller {
    ///     __typename
    ///     ... SellerAdmin
    ///   }
    ///   listingCount
    ///   listings {
    ///     __typename
    ///     ... ProjectListingCard
    ///   }
    /// }
    /// 
    /// fragment ProjectListingCard on ProjectListing {
    ///   satisfiesFilter
    ///   listing {
    ///     __typename
    ///     ... HasListingId
    ///     ... OfferCard
    ///     ... AuctionCard
    ///   }
    /// }
    /// 
    /// fragment HasListingId on Listing {
    ///   listingId
    /// }
    /// 
    /// fragment OfferCard on Offer {
    ///   price {
    ///     __typename
    ///     ... Price
    ///   }
    ///   serviceType
    ///   estate {
    ///     __typename
    ///     ... Estate
    ///   }
    /// }
    /// 
    /// fragment Estate on Estate {
    ///   type
    ///   electricity
    ///   gas
    ///   water
    ///   heating
    ///   waste
    ///   road
    ///   natureProtection
    ///   connectivity
    ///   ... HasEstateTypeInfo
    ///   address {
    ///     __typename
    ///     ... AddressListing
    ///   }
    /// }
    /// 
    /// fragment AddressListing on AddressListing {
    ///   lat
    ///   lng
    ///   cityName
    ///   streetName
    ///   ruianCode
    /// }
    /// 
    /// fragment AuctionCard on Auction {
    ///   startingPrice {
    ///     __typename
    ///     ... Price
    ///   }
    ///   serviceType
    ///   estate {
    ///     __typename
    ///     ... Estate
    ///   }
    /// }
    /// 
    /// fragment HasTitle on Listing {
    ///   title
    /// }
    /// 
    /// fragment HasDescription on Listing {
    ///   description
    /// }
    /// 
    /// fragment HasSlideshow on Listing {
    ///   slideshow {
    ///     __typename
    ///     ... Slide
    ///   }
    /// }
    /// 
    /// fragment Slide on Slide {
    ///   ... SlideSingle
    ///   ... SlideDouble
    ///   ... SlideTriple
    /// }
    /// 
    /// fragment SlideSingle on SlideSingle {
    ///   index
    ///   item {
    ///     __typename
    ///     ... Figure
    ///   }
    /// }
    /// 
    /// fragment Figure on Figure {
    ///   ... Matterport
    ///   ... Photo
    ///   ... Video
    /// }
    /// 
    /// fragment Matterport on Matterport {
    ///   url
    /// }
    /// 
    /// fragment Video on Video {
    ///   url
    /// }
    /// 
    /// fragment SlideDouble on SlideDouble {
    ///   index
    ///   layout
    ///   itemOne {
    ///     __typename
    ///     ... Figure
    ///   }
    ///   itemTwo {
    ///     __typename
    ///     ... Figure
    ///   }
    /// }
    /// 
    /// fragment SlideTriple on SlideTriple {
    ///   index
    ///   layout
    ///   itemOne {
    ///     __typename
    ///     ... Figure
    ///   }
    ///   itemTwo {
    ///     __typename
    ///     ... Figure
    ///   }
    ///   itemThree {
    ///     __typename
    ///     ... Figure
    ///   }
    /// }
    /// 
    /// fragment HasPhotos on Listing {
    ///   photos {
    ///     __typename
    ///     ... Photo
    ///   }
    /// }
    /// 
    /// fragment HasVideos on Listing {
    ///   videos {
    ///     __typename
    ///     ... Video
    ///   }
    /// }
    /// 
    /// fragment HasFloorPlans on Listing {
    ///   floorPlans {
    ///     __typename
    ///     ... FloorPlan
    ///   }
    /// }
    /// 
    /// fragment FloorPlan on FloorPlan {
    ///   figureId
    ///   url
    /// }
    /// 
    /// fragment HasState on Listing {
    ///   state
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class ListingAddMutation : global::Logic.Graphql.Generated.IListingAddMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IListingAddResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _listingInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _currencyFormatter;
        public ListingAddMutation(global::StrawberryShake.IOperationExecutor<IListingAddResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _listingInputFormatter = serializerResolver.GetInputValueFormatter("ListingInput");
            _currencyFormatter = serializerResolver.GetInputValueFormatter("Currency");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IListingAddResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListingAddResult>> ExecuteAsync(global::Logic.Graphql.Generated.ListingInput listingInput, global::Logic.Graphql.Generated.Currency currency, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(listingInput, currency);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IListingAddResult>> Watch(global::Logic.Graphql.Generated.ListingInput listingInput, global::Logic.Graphql.Generated.Currency currency, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(listingInput, currency);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Logic.Graphql.Generated.ListingInput listingInput, global::Logic.Graphql.Generated.Currency currency)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("listingInput", FormatListingInput(listingInput));
            variables.Add("currency", FormatCurrency(currency));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ListingAddMutationDocument.Instance.Hash.Value, name: "ListingAdd", document: ListingAddMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatListingInput(global::Logic.Graphql.Generated.ListingInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _listingInputFormatter.Format(value);
        }

        private global::System.Object? FormatCurrency(global::Logic.Graphql.Generated.Currency value)
        {
            return _currencyFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
