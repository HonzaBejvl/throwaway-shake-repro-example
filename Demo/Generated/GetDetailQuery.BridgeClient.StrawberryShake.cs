// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDetail GraphQL operation
    /// <code>
    /// query GetDetail($listingId: ID!) {
    ///   listing(listingId: $listingId) {
    ///     __typename
    ///     ... ListingDetail
    ///   }
    /// }
    /// 
    /// fragment ListingDetail on Listing {
    ///   ... OfferDetail
    ///   ... AuctionDetail
    ///   ... ProjectDetail
    /// }
    /// 
    /// fragment OfferDetail on Offer {
    ///   estate {
    ///     __typename
    ///     ... Estate
    ///   }
    /// }
    /// 
    /// fragment Estate on Estate {
    ///   ... HasEstateTypeInfo
    /// }
    /// 
    /// fragment HasEstateTypeInfo on Estate {
    ///   typeInfo {
    ///     __typename
    ///     ... GarageInfo
    ///   }
    /// }
    /// 
    /// fragment GarageInfo on GarageInfo {
    ///   garageType: type
    ///   usableArea
    /// }
    /// 
    /// fragment AuctionDetail on Auction {
    ///   estate {
    ///     __typename
    ///     ... Estate
    ///   }
    /// }
    /// 
    /// fragment ProjectDetail on Project {
    ///   listings {
    ///     __typename
    ///     ... ProjectListingPayload
    ///   }
    /// }
    /// 
    /// fragment ProjectListingPayload on ProjectListingPayload {
    ///   items {
    ///     __typename
    ///     ... ProjectListing
    ///   }
    /// }
    /// 
    /// fragment ProjectListing on ProjectListing {
    ///   listing {
    ///     __typename
    ///     ... ProjectListingListing
    ///   }
    /// }
    /// 
    /// fragment ProjectListingListing on ListingSimple {
    ///   ... ProjectListingOffer
    ///   ... ProjectListingAuction
    /// }
    /// 
    /// fragment ProjectListingOffer on Offer {
    ///   estate {
    ///     __typename
    ///     ... EstateProject
    ///   }
    /// }
    /// 
    /// fragment EstateProject on Estate {
    ///   ... HasEstateProjectTypeInfo
    /// }
    /// 
    /// fragment HasEstateProjectTypeInfo on Estate {
    ///   typeInfo {
    ///     __typename
    ///     ... ProjectGarageInfo
    ///   }
    /// }
    /// 
    /// fragment ProjectGarageInfo on GarageInfo {
    ///   garageType: type
    /// }
    /// 
    /// fragment ProjectListingAuction on Auction {
    ///   estate {
    ///     __typename
    ///     ... EstateProject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.0.0")]
    public partial class GetDetailQuery : global::Logic.Graphql.Generated.IGetDetailQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDetailResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetDetailQuery(global::StrawberryShake.IOperationExecutor<IGetDetailResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDetailResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDetailResult>> ExecuteAsync(global::System.String listingId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(listingId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDetailResult>> Watch(global::System.String listingId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(listingId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String listingId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("listingId", FormatListingId(listingId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDetailQueryDocument.Instance.Hash.Value, name: "GetDetail", document: GetDetailQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatListingId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
