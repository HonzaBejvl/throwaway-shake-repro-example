// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetAllSearchResultsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Logic.Graphql.Generated.IGetAllSearchResultsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Logic.Graphql.Generated.IGetAllSearchResultsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _urlParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetAllSearchResultsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Logic.Graphql.Generated.IGetAllSearchResultsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _urlParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("Url") ?? throw new global::System.ArgumentException("No serializer for type `Url` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllSearchResultsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllSearchResultsResult Result, GetAllSearchResultsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetAllSearchResultsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllSearchResultsResult, GetAllSearchResultsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllSearchResultsResultInfo(DeserializeNonNullableISearchResultDataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "search")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.State.ISearchResultData> DeserializeNonNullableISearchResultDataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var searchResults = new global::System.Collections.Generic.List<global::Logic.Graphql.Generated.State.ISearchResultData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                searchResults.Add(DeserializeNonNullableISearchResultData(child));
            }

            return searchResults;
        }

        private global::Logic.Graphql.Generated.State.ISearchResultData DeserializeNonNullableISearchResultData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Offer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.OfferData(typename);
            }

            if (typename?.Equals("Auction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.AuctionData(typename);
            }

            if (typename?.Equals("Project", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ProjectData(typename);
            }

            if (typename?.Equals("Broker", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.BrokerData(typename, sellerId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sellerId")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), photo: DeserializeNonNullableIGetDetail_Listing_Seller_Photo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "photo")), company: DeserializeNonNullableIGetDetail_Listing_Seller_Company_3(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "company")));
            }

            if (typename?.Equals("Office", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.OfficeData(typename);
            }

            if (typename?.Equals("Company", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.CompanyData(typename);
            }

            if (typename?.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.LocationData(typename, type: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), viewport: DeserializeNonNullableIGetAllSearchResults_Search_Viewport(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "viewport")), region_Name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "region_name")), district_Name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "district_name")), city_Name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city_name")), city_Part_Name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city_part_name")), street_Name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "street_name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::Logic.Graphql.Generated.State.PhotoData DeserializeNonNullableIGetDetail_Listing_Seller_Photo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Photo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.PhotoData(typename, figureId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "figureId")), url: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), originalUrl: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "originalUrl")), is360: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "is360")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _urlParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::Logic.Graphql.Generated.State.CompanyData DeserializeNonNullableIGetDetail_Listing_Seller_Company_3(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Company", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.CompanyData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), photo: DeserializeNonNullableIGetDetail_Listing_Seller_Photo_1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "photo")), headquarters: DeserializeNonNullableIGetDetail_Listing_Seller_Headquarters(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "headquarters")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.PhotoData DeserializeNonNullableIGetDetail_Listing_Seller_Photo_1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Photo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.PhotoData(typename, figureId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "figureId")), url: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), originalUrl: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "originalUrl")), is360: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "is360")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.AddressData DeserializeNonNullableIGetDetail_Listing_Seller_Headquarters(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.AddressData(typename, lat: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lat")), lng: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lng")), cityName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cityName")), streetName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "streetName")), ruianCode: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ruianCode")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::Logic.Graphql.Generated.State.ViewportData DeserializeNonNullableIGetAllSearchResults_Search_Viewport(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Viewport", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ViewportData(typename, top_Left: DeserializeNonNullableIGetAllSearchResults_Search_Viewport_Top_left(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "top_left")), bottom_Right: DeserializeNonNullableIGetAllSearchResults_Search_Viewport_Bottom_right(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bottom_right")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.GpsData DeserializeNonNullableIGetAllSearchResults_Search_Viewport_Top_left(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Gps", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.GpsData(typename, lat: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lat")), lng: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lng")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.GpsData DeserializeNonNullableIGetAllSearchResults_Search_Viewport_Bottom_right(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Gps", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.GpsData(typename, lat: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lat")), lng: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lng")));
            }

            throw new global::System.NotSupportedException();
        }
    }
}
