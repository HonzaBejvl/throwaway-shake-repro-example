// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.0.0")]
    public partial class GetDetailBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Logic.Graphql.Generated.IGetDetailResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Logic.Graphql.Generated.IGetDetailResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Logic.Graphql.Generated.GarageType> _garageTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetDetailBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Logic.Graphql.Generated.IGetDetailResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _garageTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Logic.Graphql.Generated.GarageType>("GarageType") ?? throw new global::System.ArgumentException("No serializer for type `GarageType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDetailResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDetailResult Result, GetDetailResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDetailResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDetailResult, GetDetailResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDetailResultInfo(DeserializeNonNullableIListingData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listing")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Logic.Graphql.Generated.State.IListingData DeserializeNonNullableIListingData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Auction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.AuctionData(typename, estate: DeserializeNonNullableIGetDetail_Listing_Estate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "estate")));
            }

            if (typename?.Equals("Offer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.OfferData(typename, estate: DeserializeNonNullableIGetDetail_Listing_Estate_1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "estate")));
            }

            if (typename?.Equals("Project", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ProjectData(typename, listings: DeserializeNonNullableIGetDetail_Listing_Listings(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listings")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.EstateData DeserializeNonNullableIGetDetail_Listing_Estate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Estate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.EstateData(typename, typeInfo: DeserializeNonNullableIEstateTypeInfoData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.IEstateTypeInfoData DeserializeNonNullableIEstateTypeInfoData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ApartmentInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ApartmentInfoData(typename);
            }

            if (typename?.Equals("HouseInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.HouseInfoData(typename);
            }

            if (typename?.Equals("LandInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.LandInfoData(typename);
            }

            if (typename?.Equals("CommercialInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.CommercialInfoData(typename);
            }

            if (typename?.Equals("GarageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.GarageInfoData(typename, garageType: DeserializeNonNullableGarageType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "garageType")), usableArea: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "usableArea")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.GarageType DeserializeNonNullableGarageType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _garageTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Logic.Graphql.Generated.State.EstateData DeserializeNonNullableIGetDetail_Listing_Estate_1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Estate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.EstateData(typename, typeInfo: DeserializeNonNullableIEstateTypeInfoData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.ProjectListingPayloadData DeserializeNonNullableIGetDetail_Listing_Listings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectListingPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ProjectListingPayloadData(typename, items: DeserializeNonNullableIGetDetail_Listing_Listings_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.State.ProjectListingData> DeserializeNonNullableIGetDetail_Listing_Listings_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var projectListings = new global::System.Collections.Generic.List<global::Logic.Graphql.Generated.State.ProjectListingData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                projectListings.Add(DeserializeNonNullableIGetDetail_Listing_Listings_Items(child));
            }

            return projectListings;
        }

        private global::Logic.Graphql.Generated.State.ProjectListingData DeserializeNonNullableIGetDetail_Listing_Listings_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectListing", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.ProjectListingData(typename, listing: DeserializeNonNullableIListingSimpleData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listing")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.IListingSimpleData DeserializeNonNullableIListingSimpleData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Auction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.AuctionData(typename, estate: DeserializeNonNullableIGetDetail_Listing_Listings_Items_Listing_Estate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "estate")));
            }

            if (typename?.Equals("Offer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.OfferData(typename, estate: DeserializeNonNullableIGetDetail_Listing_Listings_Items_Listing_Estate_1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "estate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.EstateData DeserializeNonNullableIGetDetail_Listing_Listings_Items_Listing_Estate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Estate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.EstateData(typename, typeInfo: DeserializeNonNullableIEstateTypeInfoData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Logic.Graphql.Generated.State.EstateData DeserializeNonNullableIGetDetail_Listing_Listings_Items_Listing_Estate_1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Estate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Logic.Graphql.Generated.State.EstateData(typename, typeInfo: DeserializeNonNullableIEstateTypeInfoData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeInfo")));
            }

            throw new global::System.NotSupportedException();
        }
    }
}
