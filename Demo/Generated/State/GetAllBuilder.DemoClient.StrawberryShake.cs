// <auto-generated/>
#nullable enable

namespace Demo.Graphql.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetAllBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetAllResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetAllResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Demo.Graphql.ServiceType> _serviceTypeParser;
        public GetAllBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetAllResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _serviceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Demo.Graphql.ServiceType>("ServiceType") ?? throw new global::System.ArgumentException("No serializer for type `ServiceType` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllResult Result, GetAllResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }

                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch (global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex)};
            }

            return new global::StrawberryShake.OperationResult<IGetAllResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllResult, GetAllResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllResultInfo(DeserializeNonNullableIListingDataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listings")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.State.IListingData> DeserializeNonNullableIListingDataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var listings = new global::System.Collections.Generic.List<global::Demo.Graphql.State.IListingData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                listings.Add(DeserializeNonNullableIListingData(child));
            }

            return listings;
        }

        private global::Demo.Graphql.State.IListingData DeserializeNonNullableIListingData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Offer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Demo.Graphql.State.OfferData(typename, serviceType: DeserializeNonNullableServiceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "serviceType")));
            }

            if (typename?.Equals("Auction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Demo.Graphql.State.AuctionData(typename, serviceType: DeserializeNonNullableServiceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "serviceType")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.Graphql.ServiceType DeserializeNonNullableServiceType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _serviceTypeParser.Parse(obj.Value.GetString()!);
        }
    }
}
