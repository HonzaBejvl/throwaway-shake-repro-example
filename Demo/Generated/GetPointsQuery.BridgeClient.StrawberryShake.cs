// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetPoints GraphQL operation
    /// <code>
    /// query GetPoints($filter: ListingFilter!) {
    ///   points(filter: $filter) {
    ///     __typename
    ///     ... Point
    ///   }
    /// }
    /// 
    /// fragment Point on Point {
    ///   ... PointProject
    ///   ... PointSimple
    ///   gps {
    ///     __typename
    ///     ... Gps
    ///   }
    /// }
    /// 
    /// fragment PointProject on PointProject {
    ///   count
    ///   listingId
    /// }
    /// 
    /// fragment PointSimple on PointSimple {
    ///   listingId
    /// }
    /// 
    /// fragment Gps on Gps {
    ///   lat
    ///   lng
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetPointsQuery : global::Logic.Graphql.Generated.IGetPointsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPointsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _listingFilterFormatter;
        public GetPointsQuery(global::StrawberryShake.IOperationExecutor<IGetPointsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _listingFilterFormatter = serializerResolver.GetInputValueFormatter("ListingFilter");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPointsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPointsResult>> ExecuteAsync(global::Logic.Graphql.Generated.ListingFilter filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPointsResult>> Watch(global::Logic.Graphql.Generated.ListingFilter filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Logic.Graphql.Generated.ListingFilter filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPointsQueryDocument.Instance.Hash.Value, name: "GetPoints", document: GetPointsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::Logic.Graphql.Generated.ListingFilter value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _listingFilterFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
