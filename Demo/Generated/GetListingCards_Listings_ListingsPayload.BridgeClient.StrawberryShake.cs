// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetListingCards_Listings_ListingsPayload : global::System.IEquatable<GetListingCards_Listings_ListingsPayload>, IGetListingCards_Listings_ListingsPayload
    {
        public GetListingCards_Listings_ListingsPayload(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.IGetListingCards_Listings_Items> items, global::System.Int32 count)
        {
            Items = items;
            Count = count;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.IGetListingCards_Listings_Items> Items { get; }

        public global::System.Int32 Count { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetListingCards_Listings_ListingsPayload)obj);
        }

        public global::System.Boolean Equals(GetListingCards_Listings_ListingsPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items)) && Count == other.Count;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Items_elm in Items)
                {
                    hash ^= 397 * Items_elm.GetHashCode();
                }

                hash ^= 397 * Count.GetHashCode();
                return hash;
            }
        }
    }
}
