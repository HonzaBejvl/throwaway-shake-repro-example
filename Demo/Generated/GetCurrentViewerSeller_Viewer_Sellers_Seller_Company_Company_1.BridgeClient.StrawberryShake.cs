// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1 : global::System.IEquatable<GetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1>, IGetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1
    {
        public GetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1(global::System.String name, global::Logic.Graphql.Generated.IGetDetail_Listing_Seller_Photo_1 photo, global::Logic.Graphql.Generated.IGetDetail_Listing_Seller_Headquarters headquarters)
        {
            Name = name;
            Photo = photo;
            Headquarters = headquarters;
        }

        public global::System.String Name { get; }

        public global::Logic.Graphql.Generated.IGetDetail_Listing_Seller_Photo_1 Photo { get; }

        public global::Logic.Graphql.Generated.IGetDetail_Listing_Seller_Headquarters Headquarters { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1)obj);
        }

        public global::System.Boolean Equals(GetCurrentViewerSeller_Viewer_Sellers_Seller_Company_Company_1? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && Photo.Equals(other.Photo) && Headquarters.Equals(other.Headquarters);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Photo.GetHashCode();
                hash ^= 397 * Headquarters.GetHashCode();
                return hash;
            }
        }
    }
}
