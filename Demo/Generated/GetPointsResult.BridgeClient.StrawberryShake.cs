// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    /// <summary>
    /// Root type pro read operace nemovizor API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GetPointsResult : global::System.IEquatable<GetPointsResult>, IGetPointsResult
    {
        public GetPointsResult(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.IGetPoints_Points> points)
        {
            Points = points;
        }

        /// <summary>
        /// Body na mapě, pro daný filtr a viewport
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.IGetPoints_Points> Points { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPointsResult)obj);
        }

        public global::System.Boolean Equals(GetPointsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Points, other.Points));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Points_elm in Points)
                {
                    hash ^= 397 * Points_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}
