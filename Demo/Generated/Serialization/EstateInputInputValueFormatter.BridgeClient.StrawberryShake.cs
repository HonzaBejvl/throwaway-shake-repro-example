// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class EstateInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _addressRuianInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _electricityFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _gasFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _waterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _heatingFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _wasteFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _roadFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _connectivityFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _natureProtectionFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _apartmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _houseInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _landInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _commercialInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _garageInputFormatter = default !;
        public global::System.String TypeName => "EstateInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _addressRuianInputFormatter = serializerResolver.GetInputValueFormatter("AddressRuianInput");
            _electricityFormatter = serializerResolver.GetInputValueFormatter("Electricity");
            _gasFormatter = serializerResolver.GetInputValueFormatter("Gas");
            _waterFormatter = serializerResolver.GetInputValueFormatter("Water");
            _heatingFormatter = serializerResolver.GetInputValueFormatter("Heating");
            _wasteFormatter = serializerResolver.GetInputValueFormatter("Waste");
            _roadFormatter = serializerResolver.GetInputValueFormatter("Road");
            _connectivityFormatter = serializerResolver.GetInputValueFormatter("Connectivity");
            _natureProtectionFormatter = serializerResolver.GetInputValueFormatter("NatureProtection");
            _apartmentInputFormatter = serializerResolver.GetInputValueFormatter("ApartmentInput");
            _houseInputFormatter = serializerResolver.GetInputValueFormatter("HouseInput");
            _landInputFormatter = serializerResolver.GetInputValueFormatter("LandInput");
            _commercialInputFormatter = serializerResolver.GetInputValueFormatter("CommercialInput");
            _garageInputFormatter = serializerResolver.GetInputValueFormatter("GarageInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.EstateInput;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IEstateInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("address", FormatAddress(input.Address)));
            }

            if (inputInfo.IsElectricitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("electricity", FormatElectricity(input.Electricity)));
            }

            if (inputInfo.IsGasSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gas", FormatGas(input.Gas)));
            }

            if (inputInfo.IsWaterSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("water", FormatWater(input.Water)));
            }

            if (inputInfo.IsHeatingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("heating", FormatHeating(input.Heating)));
            }

            if (inputInfo.IsWasteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("waste", FormatWaste(input.Waste)));
            }

            if (inputInfo.IsRoadSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("road", FormatRoad(input.Road)));
            }

            if (inputInfo.IsConnectivitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("connectivity", FormatConnectivity(input.Connectivity)));
            }

            if (inputInfo.IsNatureProtectionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("natureProtection", FormatNatureProtection(input.NatureProtection)));
            }

            if (inputInfo.IsApartmentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("apartment", FormatApartment(input.Apartment)));
            }

            if (inputInfo.IsHouseSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("house", FormatHouse(input.House)));
            }

            if (inputInfo.IsLandSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("land", FormatLand(input.Land)));
            }

            if (inputInfo.IsCommercialSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commercial", FormatCommercial(input.Commercial)));
            }

            if (inputInfo.IsGarageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("garage", FormatGarage(input.Garage)));
            }

            return fields;
        }

        private global::System.Object? FormatAddress(global::Logic.Graphql.Generated.AddressRuianInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _addressRuianInputFormatter.Format(input);
        }

        private global::System.Object? FormatElectricity(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Electricity> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_electricityFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatGas(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Gas> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_gasFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatWater(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Water> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_waterFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatHeating(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Heating> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_heatingFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatWaste(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Waste> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_wasteFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatRoad(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Road> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_roadFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatConnectivity(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.Connectivity> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_connectivityFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatNatureProtection(global::Logic.Graphql.Generated.NatureProtection input)
        {
            return _natureProtectionFormatter.Format(input);
        }

        private global::System.Object? FormatApartment(global::Logic.Graphql.Generated.ApartmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _apartmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatHouse(global::Logic.Graphql.Generated.HouseInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _houseInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLand(global::Logic.Graphql.Generated.LandInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _landInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCommercial(global::Logic.Graphql.Generated.CommercialInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _commercialInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGarage(global::Logic.Graphql.Generated.GarageInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _garageInputFormatter.Format(input);
            }
        }
    }
}
