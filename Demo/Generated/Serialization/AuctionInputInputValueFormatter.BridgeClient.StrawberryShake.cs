// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class AuctionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _estateInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _priceInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _rentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _transferInputFormatter = default !;
        public global::System.String TypeName => "AuctionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _estateInputFormatter = serializerResolver.GetInputValueFormatter("EstateInput");
            _priceInputFormatter = serializerResolver.GetInputValueFormatter("PriceInput");
            _rentInputFormatter = serializerResolver.GetInputValueFormatter("RentInput");
            _transferInputFormatter = serializerResolver.GetInputValueFormatter("TransferInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.AuctionInput;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IAuctionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEstateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("estate", FormatEstate(input.Estate)));
            }

            if (inputInfo.IsStartingPriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startingPrice", FormatStartingPrice(input.StartingPrice)));
            }

            if (inputInfo.IsRentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rent", FormatRent(input.Rent)));
            }

            if (inputInfo.IsTransferSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("transfer", FormatTransfer(input.Transfer)));
            }

            return fields;
        }

        private global::System.Object? FormatEstate(global::Logic.Graphql.Generated.EstateInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _estateInputFormatter.Format(input);
        }

        private global::System.Object? FormatStartingPrice(global::Logic.Graphql.Generated.PriceInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _priceInputFormatter.Format(input);
        }

        private global::System.Object? FormatRent(global::Logic.Graphql.Generated.RentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _rentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTransfer(global::Logic.Graphql.Generated.TransferInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _transferInputFormatter.Format(input);
            }
        }
    }
}
