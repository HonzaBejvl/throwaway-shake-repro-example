// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class GarageInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _energyEfficiencyFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _energyCertificateFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _conditionFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _materialFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _placementFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _garageTypeFormatter = default !;
        public global::System.String TypeName => "GarageInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _energyEfficiencyFormatter = serializerResolver.GetInputValueFormatter("EnergyEfficiency");
            _energyCertificateFormatter = serializerResolver.GetInputValueFormatter("EnergyCertificate");
            _conditionFormatter = serializerResolver.GetInputValueFormatter("Condition");
            _materialFormatter = serializerResolver.GetInputValueFormatter("Material");
            _placementFormatter = serializerResolver.GetInputValueFormatter("Placement");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _garageTypeFormatter = serializerResolver.GetInputValueFormatter("GarageType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.GarageInput;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IGarageInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEnergyEfficiencySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("energyEfficiency", FormatEnergyEfficiency(input.EnergyEfficiency)));
            }

            if (inputInfo.IsEnergyCertificateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("energyCertificate", FormatEnergyCertificate(input.EnergyCertificate)));
            }

            if (inputInfo.IsConditionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("condition", FormatCondition(input.Condition)));
            }

            if (inputInfo.IsMaterialSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("material", FormatMaterial(input.Material)));
            }

            if (inputInfo.IsPlacementSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("placement", FormatPlacement(input.Placement)));
            }

            if (inputInfo.IsRoomCountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("roomCount", FormatRoomCount(input.RoomCount)));
            }

            if (inputInfo.IsCeilingHeightSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ceilingHeight", FormatCeilingHeight(input.CeilingHeight)));
            }

            if (inputInfo.IsUsableAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("usableArea", FormatUsableArea(input.UsableArea)));
            }

            if (inputInfo.IsBalconyAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("balconyArea", FormatBalconyArea(input.BalconyArea)));
            }

            if (inputInfo.IsTerraceAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("terraceArea", FormatTerraceArea(input.TerraceArea)));
            }

            if (inputInfo.IsLoggiaAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("loggiaArea", FormatLoggiaArea(input.LoggiaArea)));
            }

            if (inputInfo.IsCellarAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("cellarArea", FormatCellarArea(input.CellarArea)));
            }

            if (inputInfo.IsPoolAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("poolArea", FormatPoolArea(input.PoolArea)));
            }

            if (inputInfo.IsConstructionYearSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("constructionYear", FormatConstructionYear(input.ConstructionYear)));
            }

            if (inputInfo.IsAcceptanceYearSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("acceptanceYear", FormatAcceptanceYear(input.AcceptanceYear)));
            }

            if (inputInfo.IsReconstructionYearSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("reconstructionYear", FormatReconstructionYear(input.ReconstructionYear)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            return fields;
        }

        private global::System.Object? FormatEnergyEfficiency(global::Logic.Graphql.Generated.EnergyEfficiency input)
        {
            return _energyEfficiencyFormatter.Format(input);
        }

        private global::System.Object? FormatEnergyCertificate(global::Logic.Graphql.Generated.EnergyCertificate input)
        {
            return _energyCertificateFormatter.Format(input);
        }

        private global::System.Object? FormatCondition(global::Logic.Graphql.Generated.Condition input)
        {
            return _conditionFormatter.Format(input);
        }

        private global::System.Object? FormatMaterial(global::Logic.Graphql.Generated.Material input)
        {
            return _materialFormatter.Format(input);
        }

        private global::System.Object? FormatPlacement(global::Logic.Graphql.Generated.Placement input)
        {
            return _placementFormatter.Format(input);
        }

        private global::System.Object? FormatRoomCount(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatCeilingHeight(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatUsableArea(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatBalconyArea(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTerraceArea(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLoggiaArea(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCellarArea(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPoolArea(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatConstructionYear(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatAcceptanceYear(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatReconstructionYear(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatType(global::Logic.Graphql.Generated.GarageType input)
        {
            return _garageTypeFormatter.Format(input);
        }
    }
}
