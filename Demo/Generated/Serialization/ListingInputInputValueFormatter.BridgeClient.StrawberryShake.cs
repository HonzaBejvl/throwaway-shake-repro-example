// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class ListingInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localizationInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _offerInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _auctionInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _projectInputFormatter = default !;
        public global::System.String TypeName => "ListingInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _localizationInputFormatter = serializerResolver.GetInputValueFormatter("LocalizationInput");
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _offerInputFormatter = serializerResolver.GetInputValueFormatter("OfferInput");
            _auctionInputFormatter = serializerResolver.GetInputValueFormatter("AuctionInput");
            _projectInputFormatter = serializerResolver.GetInputValueFormatter("ProjectInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.ListingInput;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IListingInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCustomIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("customId", FormatCustomId(input.CustomId)));
            }

            if (inputInfo.IsLocalizationsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("localizations", FormatLocalizations(input.Localizations)));
            }

            if (inputInfo.IsSellerIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sellerId", FormatSellerId(input.SellerId)));
            }

            if (inputInfo.IsOfferSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("offer", FormatOffer(input.Offer)));
            }

            if (inputInfo.IsAuctionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("auction", FormatAuction(input.Auction)));
            }

            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            return fields;
        }

        private global::System.Object? FormatCustomId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLocalizations(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.LocalizationInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_localizationInputFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatSellerId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatOffer(global::Logic.Graphql.Generated.OfferInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _offerInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAuction(global::Logic.Graphql.Generated.AuctionInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _auctionInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProject(global::Logic.Graphql.Generated.ProjectInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _projectInputFormatter.Format(input);
            }
        }
    }
}
