// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class PriceInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _currencyFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _priceUnitFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _pricePeriodFormatter = default !;
        public global::System.String TypeName => "PriceInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _currencyFormatter = serializerResolver.GetInputValueFormatter("Currency");
            _priceUnitFormatter = serializerResolver.GetInputValueFormatter("PriceUnit");
            _pricePeriodFormatter = serializerResolver.GetInputValueFormatter("PricePeriod");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.PriceInput;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IPriceInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsValueSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("value", FormatValue(input.Value)));
            }

            if (inputInfo.IsCurrencySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("currency", FormatCurrency(input.Currency)));
            }

            if (inputInfo.IsUnitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unit", FormatUnit(input.Unit)));
            }

            if (inputInfo.IsPeriodSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("period", FormatPeriod(input.Period)));
            }

            return fields;
        }

        private global::System.Object? FormatValue(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatCurrency(global::Logic.Graphql.Generated.Currency input)
        {
            return _currencyFormatter.Format(input);
        }

        private global::System.Object? FormatUnit(global::Logic.Graphql.Generated.PriceUnit input)
        {
            return _priceUnitFormatter.Format(input);
        }

        private global::System.Object? FormatPeriod(global::Logic.Graphql.Generated.PricePeriod input)
        {
            return _pricePeriodFormatter.Format(input);
        }
    }
}
