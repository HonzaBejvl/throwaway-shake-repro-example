// <auto-generated/>
#nullable enable

namespace Logic.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.0.0")]
    public partial class EstateTypeFilterInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _estateTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _apartmentTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _houseTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _landTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _commercialTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _garageTypeFormatter = default !;
        public global::System.String TypeName => "EstateTypeFilter";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _estateTypeFormatter = serializerResolver.GetInputValueFormatter("EstateType");
            _apartmentTypeFormatter = serializerResolver.GetInputValueFormatter("ApartmentType");
            _houseTypeFormatter = serializerResolver.GetInputValueFormatter("HouseType");
            _landTypeFormatter = serializerResolver.GetInputValueFormatter("LandType");
            _commercialTypeFormatter = serializerResolver.GetInputValueFormatter("CommercialType");
            _garageTypeFormatter = serializerResolver.GetInputValueFormatter("GarageType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Logic.Graphql.Generated.EstateTypeFilter;
            var inputInfo = runtimeValue as global::Logic.Graphql.Generated.State.IEstateTypeFilterInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsMainSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("main", FormatMain(input.Main)));
            }

            if (inputInfo.IsApartmentTypesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("apartmentTypes", FormatApartmentTypes(input.ApartmentTypes)));
            }

            if (inputInfo.IsHouseTypesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("houseTypes", FormatHouseTypes(input.HouseTypes)));
            }

            if (inputInfo.IsLandTypesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("landTypes", FormatLandTypes(input.LandTypes)));
            }

            if (inputInfo.IsCommercialTypesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commercialTypes", FormatCommercialTypes(input.CommercialTypes)));
            }

            if (inputInfo.IsGarageTypesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("garageTypes", FormatGarageTypes(input.GarageTypes)));
            }

            return fields;
        }

        private global::System.Object? FormatMain(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.EstateType> input)
        {
            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                input_list.Add(_estateTypeFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatApartmentTypes(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.ApartmentType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_apartmentTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatHouseTypes(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.HouseType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_houseTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatLandTypes(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.LandType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_landTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatCommercialTypes(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.CommercialType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_commercialTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGarageTypes(global::System.Collections.Generic.IReadOnlyList<global::Logic.Graphql.Generated.GarageType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_garageTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }
    }
}
